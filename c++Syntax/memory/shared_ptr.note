



//---------- chapter 1 --------------

desc：
	关于多个shared_ptr使用同一个this指针构造不相关的shared_ptr对象，造成this所指对象多次析构。

src:
'''code begin.=============================

	class Object{
		
		public:
			shared_ptr<Object> GetSelf(){

				return shared_ptr<Object>(this);	//construct shared_ptr from this, not shared_ptr<Object>.
			}
	}

	int main(){
		
		shared_ptr<Object> sp1(new Object);
		shared_ptr<Object> sp2(sp1->GetSelf());		//construct shared_ptr from this pointer.
		//shared_ptr<Object> sp2(sp1);				//construct shared_ptr from shared_ptr object sp1
		return 0;
	}

'''code end.===============================


note:
	分析一下上面的代码：
	可以参考一下shared_ptr的构造函数.	http://www.cplusplus.com/reference/memory/shared_ptr/shared_ptr/

	然后我们可以知道，如果要引用计数加一，使得堆对象得到可控的管理，必须是shared_ptr(shared_ptr)构造。

solution:
	通过派生std::enable_shared_from_this<T>类，然后使用基类成员函数shared_from_this可以得到解决。
	'''code begin.=============================

	class Object : public std::shared_from_this<Object>{
		
		public:
			shared_ptr<Object> GetSelf(){

				return shared_from_this();	
			}
	}

	

'''code end.===============================