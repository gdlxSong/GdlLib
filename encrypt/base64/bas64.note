
# 关于记录base64编码算法的原理：

----------------------------------------------

base64: BASE64 编码是一种常用的将十六进制数据转换为可见字符的编码。

BASE64 编解码原理
将数据编码成 BASE64 编码时，以 3 字节数据为一组，转换为 24bit 的二进制数，将 24bit
的二进制数分成四组，每组 6bit。对于每一组，得到一个数字：0-63。然后根据这个数字查
表即得到结果。表如下：
 Value Encoding Value Encoding Value Encoding Value Encoding
 0 A 17 R 34 i 51 z
 1 B 18 S 35 j 52 0
 2 C 19 T 36 k 53 1
 3 D 20 U 37 l 54 2
 4 E 21 V 38 m 55 3
 5 F 22 W 39 n 56 4
 6 G 23 X 40 o 57 5
 7 H 24 Y 41 p 58 6
 8 I 25 Z 42 q 59 7
 9 J 26 a 43 r 60 8
 10 K 27 b 44 s 61 9
 11 L 28 c 45 t 62 +
 12 M 29 d 46 u 63 /
 13 N 30 e 47 v
 14 O 31 f 48 w (pad) =
 15 P 32 g 49 x
 16 Q 33 h 50 y


比如有数据：0x30 0x82 0x02
编码过程如下：
 1）得到 16 进制数据： 30 82 02
 2）得到二进制数据： 00110000 10000010 00000010
 3）每 6bit 分组： 001100 001000 001000 000010
 4）得到数字： 12 8 8 2
 5）根据查表得到结果 ： M I I C
 BASE64 填充：在不够的情况下在右边加 0。
有三种情况：
 1) 输入数据比特数是 24 的整数倍（输入字节为 3 字节整数倍），则无填充；
 2) 输入数据最后编码的是 1 个字节(输入数据字节数除 3 余 1)，即 8 比特，则需要填充 2 个"=="，因为要补齐 6 比特，需要加 2 个 00；
 3）输入数据最后编码是 2 个字节(输入数据字节数除 3 余 2)，则需要填充 1 个"="，因
为补齐 6 比特，需要加一个 00。
举例如下：
对 0x30 编码：
 1) 0x30 的二进制为：00110000
 2) 分组为：001100 00
 3) 填充 2 个 00：001100 000000
 4) 得到数字：12 0
 5) 查表得到的编码为 MA，另外加上两个==
所以最终编码为：MA==
 base64 解码是其编码过程的逆过程。解码时，将 base64 编码根据表展开，根据有几个
等号去掉结尾的几个 00，然后每 8 比特恢复即可。



另外，其实base64编码还可以是不进行字符映射的，直接十进制。

